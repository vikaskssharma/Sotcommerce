/**
 * (c) R Systems International Ltd.
 */
package com.sbsc.fos.common.dao;

import java.text.ParseException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.HibernateException;
import org.hibernate.type.Type;

import com.sbsc.fos.persistance.ProductTbMaster;

/**
 * The purpose of using a Generic DAO is the CRUD operations that can be
 * performed on each entity.
 * 
 * @param <T>
 *            The Entity on which CRUD operations to be performed.
 * 
 * @author simanchal.patra
 */
public interface GenericDAO<T> {

	/**
	 * Set the Entity on which database operations to be performed.
	 * 
	 * @param clazz
	 */
	public void setClazz(Class<T> clazz);

	/**
	 * Reads all the Entities present in the system.
	 * 
	 * @return List of the Entities.
	 * @throws HibernateException
	 */
	public List<T> findAll() throws HibernateException;

	/**
	 * Reads the Entity which matches the specified property.
	 * 
	 * @param propertyName
	 *            Name of the property to be matched.
	 * @param value
	 *            Value of the property to be matched.
	 * 
	 * @return List of the Entities
	 * 
	 * @throws HibernateException
	 */
	public List<T> findAllByProperty(String propertyName, Object value)
			throws HibernateException;

	/**
	 * Reads the Entity which matches all the specified properties.
	 * 
	 * @param propertiesMap
	 *            Map containing the properties to be matched.
	 * 
	 * @return List of the Entities
	 * 
	 * @throws HibernateException
	 */
	public List<T> findAllByProperty(Map<String, Object> propertiesMap)
			throws HibernateException;

	/**
	 * Update the Entity in the system with new values.
	 * 
	 * @param entity
	 *            The Entity to be updated in the System.
	 * 
	 * @return The updated Entity
	 * 
	 * @throws HibernateException
	 */
	public T update(final T entity) throws HibernateException;

	/**
	 * Remove the Entity from the system.
	 * 
	 * @param entity
	 *            The Entity to be removed.
	 * 
	 * @throws HibernateException
	 */
	public void delete(final T entity) throws HibernateException;

	/**
	 * Remove the Entity from the system specified by the Identifier.
	 * 
	 * @param entityId
	 *            The Identifier to be removed.
	 * 
	 * @throws HibernateException
	 */
	public void deleteById(final long entityId) throws HibernateException;

	/**
	 * Save or Update the Entity in the System.
	 * 
	 * @param entity
	 *            The Entity to be Updated or Saved.
	 * 
	 * @throws HibernateException
	 */
	public void saveOrUpdate(T entity) throws HibernateException;

	/**
	 * Reads the Entity from the system specified by the Identifier.
	 * 
	 * @param id
	 *            Identifier of the Entity whose details required.
	 * 
	 * @return The Entity
	 * 
	 * @throws HibernateException
	 */
	public T findByID(long id) throws HibernateException;

	/**
	 * This saves the specified Entity into the System.
	 * 
	 * @param entity
	 *            The Entity to be saved.
	 * 
	 * @return Identifier of the newly created Entity.
	 * 
	 * @throws HibernateException
	 */
	public Long create(final T entity) throws HibernateException;

	public List<T> findAllByFilters(Map<String, Object> filter_criteria)
			throws ParseException;

	public List<ProductTbMaster> executeSQLQuery(String sqlQuery,
			LinkedHashMap<String, Type> scalarMapping)
			throws HibernateException;

	public List<?> executeSQLQuery(String sqlQuery) throws HibernateException;

	/**
	 * Reads the Entity which matches the specified property. The Property must
	 * have String Value. The values will be checked with case Ignored.
	 * 
	 * @param propertyName
	 *            Name of the property to be matched.
	 * @param value
	 *            String Value of the property to be matched.
	 * 
	 * @return List of the Entities
	 * 
	 * @throws HibernateException
	 */
	public List<T> findAllByStringPropertyIgnoreCase(String propertyName,
			String value) throws HibernateException;
	public List<T> findAllByPropertyCountandDate(Map<String, Object> propertiesMap)
			throws HibernateException;

}
