package com.sot.ecommerce.controller;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.jms.ConnectionFactory;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.sbsc.fos.common.vo.SessionInfo;
import com.sbsc.fos.customersupport.form.CustomerSupportForm;
import com.sbsc.fos.customersupport.form.validator.CustomerSupportFormValidator;
import com.sbsc.fos.customersupport.web.handler.CustomerSupportHandler;
import com.sbsc.fos.exception.BusinessFailureException;
import com.sbsc.fos.exception.GenericFailureException;
import com.sbsc.fos.jms.MessageProducerBean;
import com.sbsc.fos.utils.FormSearchDataExtract;
import com.sbsc.fos.utils.SBSConstants.CUSTOMER_SUPPORT_STATUS;
import com.sbsc.fos.web.form.FormSearch;
import com.sbsc.fos.web.form.validator.FormSearchValidator;


/**
 * @author Vikas_sharma
 * 
 */
@Controller
@RequestMapping(value = "/store")

public class CustomerSupportController {

	
	
	@Autowired
	private CustomerSupportHandler customerSupportHandler;
	@Autowired
	private CustomerSupportFormValidator customerSupportFormValidator;

	@Autowired
	FormSearchValidator formSearchValidator;

	/** Logger instance. **/
	private static final Logger logger = Logger
			.getLogger(CustomerSupportController.class);

	public FormSearchValidator getFormSearchValidator() {
		return formSearchValidator;
	}

	public void setFormSearchValidator(FormSearchValidator formSearchValidator) {
		this.formSearchValidator = formSearchValidator;
	}

	/**
	 * Getting list of Customer request generated regarding the queries of
	 * customer . this method is used for getting list of request number
	 * generated by customer.
	 * 
	 * @param customerSupportForm
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/custsupportlist.htm", method = RequestMethod.GET)
	public ModelAndView customersupportlist(Model model,
			HttpServletRequest request) {
		SessionInfo sessionInfo = getSessionInfo(request);
		FormSearch formSearch = new FormSearch();
		model.addAttribute("formSearch", formSearch);
		List<CustomerSupportForm> customerSupportform = new ArrayList<CustomerSupportForm>();
		try {
			customerSupportform = customerSupportHandler.findIssuesByUserId(
					customerSupportform, sessionInfo);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			logger.error("Error occured while listing  the request details "
					+ e);
		}
		model.addAttribute("customerSupportList", customerSupportform);
		model.addAttribute("customerSupportForm", new CustomerSupportForm());
		model.addAttribute("allStatuses",getAllStatus());
		return new ModelAndView("/customersupport/custsupoortlist");

	}

	/**
	 * this method is used for getting the new customer query form.
	 * 
	 * @param customerSupportForm
	 * @param locale
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/customersupport.htm", method = RequestMethod.GET)
	public ModelAndView customersupport(

	Locale locale, Model model, HttpServletRequest request) {
		SessionInfo sessionInfo = getSessionInfo(request);
		CustomerSupportForm customerSupportForm = new CustomerSupportForm();
		FormSearch formSearch = new FormSearch();
		customerSupportForm.setEmailaddress(customerSupportHandler
				.getEmailforUserId(sessionInfo.getUserId()));
		model.addAttribute("formSearch", formSearch);
		model.addAttribute("customerSupportForm", customerSupportForm);
		model.addAttribute("issuetypelist",
				customerSupportHandler.findAllissues());
		return new ModelAndView("/customersupport/customer_support");

	}

	@RequestMapping(value = "/custsupportlistWithoutlogin.htm", method = RequestMethod.GET)
	public ModelAndView custsupportlistWithoutlogin(

	Locale locale, Model model, HttpServletRequest request) {
		CustomerSupportForm customerSupportForm = new CustomerSupportForm();
		FormSearch formSearch = new FormSearch();
		List<String> customerissuelist=customerSupportHandler.findAllissues();
		model.addAttribute("formSearch", formSearch);
		model.addAttribute("customerSupportForm", customerSupportForm);
		
		model.addAttribute("issuetypelist",
				customerissuelist);
		return new ModelAndView("/customersupport/store_customer_support");

	}

	/**
	 * this method is used for get submit the form and the new customer query
	 * form.
	 * 
	 * @param customerSupportForm
	 * @param locale
	 * @param model
	 * @param request
	 * @return
	 * @throws ParseException
	 */
	@RequestMapping(value = "/custsupportsubmitWithoutlogin.htm", method = RequestMethod.POST)
	public ModelAndView customersubmitwithlogin(
			@ModelAttribute("customerSupportForm") CustomerSupportForm customerSupportForm,
			BindingResult result, Locale locale, Model model,
			HttpServletRequest request,
			final RedirectAttributes redirectAttributes) throws ParseException {
		String message = "";
		if (customerSupportForm.getOrderNumber() != "") {
			customerSupportForm
					.setOrdernumberfromdatabase(customerSupportHandler
							.getOrderNumber(customerSupportForm));

		}
		customerSupportFormValidator.validate(customerSupportForm, result);
		FormSearch formSearch = new FormSearch();
		model.addAttribute("formSearch", formSearch);

		if (result.hasErrors()) {

			model.addAttribute("issuetypelist",
					customerSupportHandler.findAllissues());

			return new ModelAndView("/customersupport/store_customer_support");
		}

		message = customerSupportHandler.saveCustomerQueryWithLogin(
				customerSupportForm, 1L);
		// model.addAttribute("message", message);
		redirectAttributes.addFlashAttribute("message", message);
		return new ModelAndView("redirect:customer_submit.htm");
	}

	@RequestMapping(value = "/customer_submit.htm", method = RequestMethod.GET)
	public ModelAndView customersubmit(
			@ModelAttribute("message") String message, Model model) {

		model.addAttribute("message", message);
		
		return new ModelAndView("/customersupport/customer_submit");
	}

	@RequestMapping(value = "/customersubmit.htm", method = RequestMethod.POST)
	public ModelAndView customersubmit(
			@ModelAttribute("customerSupportForm") CustomerSupportForm customerSupportForm,
			BindingResult result, Locale locale, Model model,
			HttpServletRequest request,
			final RedirectAttributes redirectAttributes) throws ParseException {

		SessionInfo sessionInfo = getSessionInfo(request);
		List<CustomerSupportForm> customerSupportlist = new ArrayList<CustomerSupportForm>();
		String message = "";
		if (customerSupportForm.getOrderNumber() != "") {
			customerSupportForm
					.setOrdernumberfromdatabase(customerSupportHandler
							.getOrderNumber(customerSupportForm));

		}
		customerSupportFormValidator.validate(customerSupportForm, result);
		FormSearch formSearch = new FormSearch();
		model.addAttribute("formSearch", formSearch);

		if (result.hasErrors()) {

			model.addAttribute("issuetypelist",
					customerSupportHandler.findAllissues());

			return new ModelAndView("/customersupport/customer_support");
		}

		message = customerSupportHandler.saveCustomerQuery(customerSupportForm,
				sessionInfo);

		try {
			customerSupportlist = customerSupportHandler.findIssuesByUserId(
					customerSupportlist, sessionInfo);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			logger.error("Error occured while deleting the request details "
					+ e);
		}

		redirectAttributes.addFlashAttribute("message", message);

		return new ModelAndView("redirect:custsupportlist.htm");

	}

	/**
	 * this method is used for delete and the new customer query form.
	 * 
	 * @param customerSupportForm
	 * @param locale
	 * @param model
	 * @param request
	 * @return
	 * @throws NamingException 
	 * @throws JMSException 
	 */
	@RequestMapping(value = "/messagesend.htm", method = RequestMethod.GET)
	public ModelAndView messageSend(Model model) throws NamingException, JMSException{
		ApplicationContext context = new AnnotationConfigApplicationContext(MessageProducerBean.class);
			     MessageProducerBean mp = (MessageProducerBean) context.getBean("producer");
			     model.addAttribute("message","message send");
	return new ModelAndView("/customersupport/customer_submit");
}
	
	
	
	@RequestMapping(value = "/mesagereceived.htm", method = RequestMethod.GET)
	public ModelAndView messagereceived(Model model) throws NamingException, JMSException{
	InitialContext initCtx= new InitialContext();
	
    Context envCtx = (Context) initCtx.lookup("java:comp/env");

	ConnectionFactory connectionFactory = (ConnectionFactory) envCtx
			.lookup("jms/mqConnectionFactory");

	javax.jms.Connection connection = connectionFactory.createConnection();
	Session session = connection.createSession(false,
			Session.AUTO_ACKNOWLEDGE);

	TextMessage message = session.createTextMessage();
	message.setText("My text message was send and received");
	connection.start();

	Destination destination = session.createQueue("jms/myQueue");
	MessageProducer producer = session.createProducer(destination);
	producer.setDeliveryMode(DeliveryMode.PERSISTENT);
	System.out.println(message+"messagesent");
	System.out.println("messager sent");
	
	producer.send(message);
	model.addAttribute("message","message received");
	return new ModelAndView("/customersupport/customer_submit");
}
	@RequestMapping(value = "/deletecustomeRequest.htm", method = RequestMethod.GET)
	public ModelAndView deleterequest(
			@ModelAttribute("customerSupportForm") CustomerSupportForm customerSupportForm,
			Locale locale, Model model, HttpServletRequest request) {
		List<CustomerSupportForm> customerSupportlist = new ArrayList<CustomerSupportForm>();
		String requestnumber = request.getParameter("req_number");
		SessionInfo sessionInfo = getSessionInfo(request);
		String message = customerSupportHandler.deleteRequest(requestnumber,
				sessionInfo);
		try {
			customerSupportlist = customerSupportHandler.findIssuesByUserId(
					customerSupportlist, sessionInfo);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			logger.error("Error occured while deleting the request details "
					+ e);
		}
		System.out.println("customersupportform value:::"
				+ customerSupportForm.getFirstname());
		FormSearch formSearch = new FormSearch();
		model.addAttribute("formSearch", formSearch);
		model.addAttribute("customerSupportList", customerSupportlist);
		model.addAttribute("message", message);
		model.addAttribute("allStatuses",getAllStatus());
		return new ModelAndView("/customersupport/custsupoortlist");

	}

	/**
	 * this method is used for edit the customer request
	 * 
	 * @param customerSupportForm
	 * @param locale
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/viewcustomerRequest.htm", method = RequestMethod.GET)
	public ModelAndView editrequest(
			@ModelAttribute("customerSupportForm") CustomerSupportForm customerSupportForm,
			Locale locale, Model model, HttpServletRequest request) {

		String requestnumber = request.getParameter("req_number");
		
		System.out.println("request_number::" + requestnumber);
		Long reqno = Long.parseLong(requestnumber);

		customerSupportForm = customerSupportHandler.findById(
				customerSupportForm, reqno);
		customerSupportForm.setViewmode("viewmode");

		System.out.println("customersupportform value:::"
				+ customerSupportForm.getFirstname());
		model.addAttribute("issuetypelist",
				customerSupportHandler.findAllissues());
		model.addAttribute("requestNumber", requestnumber);
		model.addAttribute("view_mode", "viewmode");
		model.addAttribute("customerSupportForm", customerSupportForm);
		return new ModelAndView("/customersupport/view_customer_support");

	}

	@RequestMapping(value = "/bulk_order.htm", method = RequestMethod.GET)
	public ModelAndView bulkorder(HttpServletRequest request) {

		return new ModelAndView("/customersupport/bulk_order");

	}

	/**
	 * This works as a controller to show all the filtered Request for a
	 * customer
	 * 
	 * @param locale
	 * @param request
	 * @return
	 * @throws GenericFailureException
	 * @throws BusinessFailureException
	 * @throws ParseException
	 */
	@RequestMapping(value = "/filtercustomerSupport.htm", method = RequestMethod.GET)
	public ModelAndView AllOrdersHistoryFilter(
			@ModelAttribute("formSearch") FormSearch formSearch, Model model,
			BindingResult bindingResult, Locale locale,
			HttpServletRequest request) throws GenericFailureException,
			BusinessFailureException, ParseException {
		List<CustomerSupportForm> customerSupportlist = new ArrayList<CustomerSupportForm>();

		Map<String, Object> filter_criteria = null;
		formSearchValidator.validate(formSearch, bindingResult);
		try {
			SessionInfo sessionInfo = getSessionInfo(request);
			if (bindingResult.hasErrors()) {
				logger.info("Invalid Type for filter:" + filter_criteria);
				model.addAttribute("formSearch", formSearch);

				try {
					customerSupportlist = customerSupportHandler
							.findIssuesByUserId(customerSupportlist,
									sessionInfo);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return new ModelAndView("/customersupport/custsupoortlist");
			} else {
				customerSupportlist = customerSupportHandler
						.findAllQueriesByFilters(customerSupportlist,
								FormSearchDataExtract
										.extractFormData(formSearch),
								sessionInfo);
				model.addAttribute("allStatuses",getAllStatus());
				model.addAttribute("customerSupportList", customerSupportlist);
				return new ModelAndView("/customersupport/custsupoortlist");

			}
		} catch (HibernateException hexp) {
			logger.error("Error occured while fetching filtered details "
					+ hexp);
		}
		return null;
	}

	/**
	 * Provides the User and Store information from Session.
	 * 
	 * @param request
	 *            The HttpServletRequest
	 * 
	 * @return The SessionInfo
	 */
	private SessionInfo getSessionInfo(HttpServletRequest request) {

		return new SessionInfo((Long) request.getSession().getAttribute(
				"userId"), (Long) request.getSession().getAttribute("storeId"),
				(String) request.getSession().getAttribute("roleName"));
	}
	
	private HashMap<String, String> getAllStatus() {

		HashMap<String, String> allStatus = new HashMap<String, String>();

		allStatus.put(CUSTOMER_SUPPORT_STATUS.Pending.toString(), CUSTOMER_SUPPORT_STATUS.Pending.toString());

		allStatus.put(CUSTOMER_SUPPORT_STATUS.Answered.toString(), CUSTOMER_SUPPORT_STATUS.Answered.toString());
			
		return allStatus;
	}
	

}
